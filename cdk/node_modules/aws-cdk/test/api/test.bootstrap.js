"use strict";
const lib_1 = require("../../lib");
const serialize_1 = require("../../lib/serialize");
const mock_sdk_1 = require("../util/mock-sdk");
module.exports = {
    async 'do bootstrap'(test) {
        // GIVEN
        const sdk = new mock_sdk_1.MockSDK();
        let executed = false;
        sdk.stubCloudFormation({
            describeStacks() {
                return {
                    Stacks: []
                };
            },
            createChangeSet(info) {
                const template = serialize_1.fromYAML(info.TemplateBody);
                const bucketProperties = template.Resources.StagingBucket.Properties;
                test.equals(bucketProperties.BucketName, undefined, 'Expected BucketName to be undefined');
                test.equals(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID, undefined, 'Expected KMSMasterKeyID to be undefined');
                return {};
            },
            describeChangeSet() {
                return {
                    Status: 'CREATE_COMPLETE',
                    Changes: [],
                };
            },
            executeChangeSet() {
                executed = true;
                return {};
            }
        });
        // WHEN
        const ret = await lib_1.bootstrapEnvironment({
            account: '123456789012',
            region: 'us-east-1',
            name: 'mock',
        }, sdk, 'mockStack', undefined);
        // THEN
        test.equals(ret.noOp, false);
        test.equals(executed, true);
        test.done();
    },
    async 'do bootstrap using custom bucket name'(test) {
        // GIVEN
        const sdk = new mock_sdk_1.MockSDK();
        let executed = false;
        sdk.stubCloudFormation({
            describeStacks() {
                return {
                    Stacks: []
                };
            },
            createChangeSet(info) {
                const template = serialize_1.fromYAML(info.TemplateBody);
                const bucketProperties = template.Resources.StagingBucket.Properties;
                test.equals(bucketProperties.BucketName, 'foobar', 'Expected BucketName to be foobar');
                test.equals(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID, undefined, 'Expected KMSMasterKeyID to be undefined');
                return {};
            },
            describeChangeSet() {
                return {
                    Status: 'CREATE_COMPLETE',
                    Changes: [],
                };
            },
            executeChangeSet() {
                executed = true;
                return {};
            }
        });
        // WHEN
        const ret = await lib_1.bootstrapEnvironment({
            account: '123456789012',
            region: 'us-east-1',
            name: 'mock',
        }, sdk, 'mockStack', undefined, {
            bucketName: 'foobar',
        });
        // THEN
        test.equals(ret.noOp, false);
        test.equals(executed, true);
        test.done();
    },
    async 'do bootstrap using KMS CMK'(test) {
        // GIVEN
        const sdk = new mock_sdk_1.MockSDK();
        let executed = false;
        sdk.stubCloudFormation({
            describeStacks() {
                return {
                    Stacks: []
                };
            },
            createChangeSet(info) {
                const template = serialize_1.fromYAML(info.TemplateBody);
                const bucketProperties = template.Resources.StagingBucket.Properties;
                test.equals(bucketProperties.BucketName, undefined, 'Expected BucketName to be undefined');
                test.equals(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID, 'myKmsKey', 'Expected KMSMasterKeyID to be myKmsKey');
                return {};
            },
            describeChangeSet() {
                return {
                    Status: 'CREATE_COMPLETE',
                    Changes: [],
                };
            },
            executeChangeSet() {
                executed = true;
                return {};
            }
        });
        // WHEN
        const ret = await lib_1.bootstrapEnvironment({
            account: '123456789012',
            region: 'us-east-1',
            name: 'mock',
        }, sdk, 'mockStack', undefined, {
            kmsKeyId: 'myKmsKey',
        });
        // THEN
        test.equals(ret.noOp, false);
        test.equals(executed, true);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,