"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const deploy_stack_1 = require("./deploy-stack");
// tslint:disable:max-line-length
/** @experimental */
exports.BUCKET_NAME_OUTPUT = 'BucketName';
/** @experimental */
exports.BUCKET_DOMAIN_NAME_OUTPUT = 'BucketDomainName';
/** @experimental */
async function bootstrapEnvironment(environment, aws, toolkitStackName, roleArn, props = {}) {
    const template = {
        Description: "The CDK Toolkit Stack. It was created by `cdk bootstrap` and manages resources necessary for managing your Cloud Applications with AWS CDK.",
        Resources: {
            StagingBucket: {
                Type: "AWS::S3::Bucket",
                Properties: {
                    BucketName: props.bucketName,
                    AccessControl: "Private",
                    BucketEncryption: {
                        ServerSideEncryptionConfiguration: [{
                                ServerSideEncryptionByDefault: {
                                    SSEAlgorithm: "aws:kms",
                                    KMSMasterKeyID: props.kmsKeyId,
                                },
                            }]
                    },
                    PublicAccessBlockConfiguration: {
                        BlockPublicAcls: true,
                        BlockPublicPolicy: true,
                        IgnorePublicAcls: true,
                        RestrictPublicBuckets: true,
                    },
                }
            }
        },
        Outputs: {
            [exports.BUCKET_NAME_OUTPUT]: {
                Description: "The name of the S3 bucket owned by the CDK toolkit stack",
                Value: { Ref: "StagingBucket" }
            },
            [exports.BUCKET_DOMAIN_NAME_OUTPUT]: {
                Description: "The domain name of the S3 bucket owned by the CDK toolkit stack",
                Value: { "Fn::GetAtt": ["StagingBucket", "DomainName"] }
            }
        }
    };
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    const templateFile = `${toolkitStackName}.template.json`;
    await fs.writeJson(path.join(builder.outdir, templateFile), template, { spaces: 2 });
    builder.addArtifact(toolkitStackName, {
        type: cxapi.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile
        },
    });
    const assembly = builder.buildAssembly();
    return await deploy_stack_1.deployStack({ stack: assembly.getStack(toolkitStackName), sdk: aws, roleArn });
}
exports.bootstrapEnvironment = bootstrapEnvironment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTBDO0FBQzFDLCtCQUFnQztBQUNoQyx5QkFBMEI7QUFDMUIsNkJBQThCO0FBQzlCLGlEQUFnRTtBQUdoRSxpQ0FBaUM7QUFFakMsb0JBQW9CO0FBQ1AsUUFBQSxrQkFBa0IsR0FBRyxZQUFZLENBQUM7QUFDL0Msb0JBQW9CO0FBQ1AsUUFBQSx5QkFBeUIsR0FBRyxrQkFBa0IsQ0FBQztBQWtCNUQsb0JBQW9CO0FBQ2IsS0FBSyxVQUFVLG9CQUFvQixDQUFDLFdBQThCLEVBQUUsR0FBUyxFQUFFLGdCQUF3QixFQUFFLE9BQTJCLEVBQUUsUUFBbUMsRUFBRTtJQUVoTCxNQUFNLFFBQVEsR0FBRztRQUNmLFdBQVcsRUFBRSw2SUFBNkk7UUFDMUosU0FBUyxFQUFFO1lBQ1QsYUFBYSxFQUFFO2dCQUNiLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLFVBQVUsRUFBRTtvQkFDVixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7b0JBQzVCLGFBQWEsRUFBRSxTQUFTO29CQUN4QixnQkFBZ0IsRUFBRTt3QkFDaEIsaUNBQWlDLEVBQUUsQ0FBQztnQ0FDbEMsNkJBQTZCLEVBQUU7b0NBQzdCLFlBQVksRUFBRSxTQUFTO29DQUN2QixjQUFjLEVBQUUsS0FBSyxDQUFDLFFBQVE7aUNBQy9COzZCQUNGLENBQUM7cUJBQ0g7b0JBQ0QsOEJBQThCLEVBQUU7d0JBQzlCLGVBQWUsRUFBRSxJQUFJO3dCQUNyQixpQkFBaUIsRUFBRSxJQUFJO3dCQUN2QixnQkFBZ0IsRUFBRSxJQUFJO3dCQUN0QixxQkFBcUIsRUFBRSxJQUFJO3FCQUM1QjtpQkFDRjthQUNGO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUCxDQUFDLDBCQUFrQixDQUFDLEVBQUU7Z0JBQ3BCLFdBQVcsRUFBRSwwREFBMEQ7Z0JBQ3ZFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUU7YUFDaEM7WUFDRCxDQUFDLGlDQUF5QixDQUFDLEVBQUU7Z0JBQzNCLFdBQVcsRUFBRSxpRUFBaUU7Z0JBQzlFLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsRUFBRTthQUN6RDtTQUNGO0tBQ0YsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sWUFBWSxHQUFHLEdBQUcsZ0JBQWdCLGdCQUFnQixDQUFDO0lBRXpELE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFckYsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNwQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyx3QkFBd0I7UUFDakQsV0FBVyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ25GLFVBQVUsRUFBRTtZQUNWLFlBQVk7U0FDYjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QyxPQUFPLE1BQU0sMEJBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUF2REQsb0RBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IHsgZGVwbG95U3RhY2ssIERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi9kZXBsb3ktc3RhY2snO1xuaW1wb3J0IHsgSVNESyB9IGZyb20gJy4vdXRpbC9zZGsnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGhcblxuLyoqIEBleHBlcmltZW50YWwgKi9cbmV4cG9ydCBjb25zdCBCVUNLRVRfTkFNRV9PVVRQVVQgPSAnQnVja2V0TmFtZSc7XG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGNvbnN0IEJVQ0tFVF9ET01BSU5fTkFNRV9PVVRQVVQgPSAnQnVja2V0RG9tYWluTmFtZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQm9vdHN0cmFwRW52aXJvbm1lbnRQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSB0byBiZSBnaXZlbiB0byB0aGUgQ0RLIEJvb3RzdHJhcCBidWNrZXQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gYSBuYW1lIGlzIGdlbmVyYXRlZCBieSBDbG91ZEZvcm1hdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGJ1Y2tldE5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBleGlzdGluZyBLTVMga2V5IHRvIGJlIHVzZWQgZm9yIGVuY3J5cHRpbmcgaXRlbXMgaW4gdGhlIGJ1Y2tldC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSB0aGUgZGVmYXVsdCBLTVMga2V5IGZvciBTMyB3aWxsIGJlIHVzZWQuXG4gICAqL1xuICByZWFkb25seSBrbXNLZXlJZD86IHN0cmluZztcbn1cblxuLyoqIEBleHBlcmltZW50YWwgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBib290c3RyYXBFbnZpcm9ubWVudChlbnZpcm9ubWVudDogY3hhcGkuRW52aXJvbm1lbnQsIGF3czogSVNESywgdG9vbGtpdFN0YWNrTmFtZTogc3RyaW5nLCByb2xlQXJuOiBzdHJpbmcgfCB1bmRlZmluZWQsIHByb3BzOiBCb290c3RyYXBFbnZpcm9ubWVudFByb3BzID0ge30pOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG5cbiAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgRGVzY3JpcHRpb246IFwiVGhlIENESyBUb29sa2l0IFN0YWNrLiBJdCB3YXMgY3JlYXRlZCBieSBgY2RrIGJvb3RzdHJhcGAgYW5kIG1hbmFnZXMgcmVzb3VyY2VzIG5lY2Vzc2FyeSBmb3IgbWFuYWdpbmcgeW91ciBDbG91ZCBBcHBsaWNhdGlvbnMgd2l0aCBBV1MgQ0RLLlwiLFxuICAgIFJlc291cmNlczoge1xuICAgICAgU3RhZ2luZ0J1Y2tldDoge1xuICAgICAgICBUeXBlOiBcIkFXUzo6UzM6OkJ1Y2tldFwiLFxuICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgQnVja2V0TmFtZTogcHJvcHMuYnVja2V0TmFtZSxcbiAgICAgICAgICBBY2Nlc3NDb250cm9sOiBcIlByaXZhdGVcIixcbiAgICAgICAgICBCdWNrZXRFbmNyeXB0aW9uOiB7XG4gICAgICAgICAgICBTZXJ2ZXJTaWRlRW5jcnlwdGlvbkNvbmZpZ3VyYXRpb246IFt7XG4gICAgICAgICAgICAgIFNlcnZlclNpZGVFbmNyeXB0aW9uQnlEZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgU1NFQWxnb3JpdGhtOiBcImF3czprbXNcIixcbiAgICAgICAgICAgICAgICBLTVNNYXN0ZXJLZXlJRDogcHJvcHMua21zS2V5SWQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH0sXG4gICAgICAgICAgUHVibGljQWNjZXNzQmxvY2tDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICBCbG9ja1B1YmxpY0FjbHM6IHRydWUsXG4gICAgICAgICAgICBCbG9ja1B1YmxpY1BvbGljeTogdHJ1ZSxcbiAgICAgICAgICAgIElnbm9yZVB1YmxpY0FjbHM6IHRydWUsXG4gICAgICAgICAgICBSZXN0cmljdFB1YmxpY0J1Y2tldHM6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgT3V0cHV0czoge1xuICAgICAgW0JVQ0tFVF9OQU1FX09VVFBVVF06IHtcbiAgICAgICAgRGVzY3JpcHRpb246IFwiVGhlIG5hbWUgb2YgdGhlIFMzIGJ1Y2tldCBvd25lZCBieSB0aGUgQ0RLIHRvb2xraXQgc3RhY2tcIixcbiAgICAgICAgVmFsdWU6IHsgUmVmOiBcIlN0YWdpbmdCdWNrZXRcIiB9XG4gICAgICB9LFxuICAgICAgW0JVQ0tFVF9ET01BSU5fTkFNRV9PVVRQVVRdOiB7XG4gICAgICAgIERlc2NyaXB0aW9uOiBcIlRoZSBkb21haW4gbmFtZSBvZiB0aGUgUzMgYnVja2V0IG93bmVkIGJ5IHRoZSBDREsgdG9vbGtpdCBzdGFja1wiLFxuICAgICAgICBWYWx1ZTogeyBcIkZuOjpHZXRBdHRcIjogW1wiU3RhZ2luZ0J1Y2tldFwiLCBcIkRvbWFpbk5hbWVcIl0gfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBvdXRkaXIgPSBhd2FpdCBmcy5ta2R0ZW1wKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2Nkay1ib290c3RyYXAnKSk7XG4gIGNvbnN0IGJ1aWxkZXIgPSBuZXcgY3hhcGkuQ2xvdWRBc3NlbWJseUJ1aWxkZXIob3V0ZGlyKTtcbiAgY29uc3QgdGVtcGxhdGVGaWxlID0gYCR7dG9vbGtpdFN0YWNrTmFtZX0udGVtcGxhdGUuanNvbmA7XG5cbiAgYXdhaXQgZnMud3JpdGVKc29uKHBhdGguam9pbihidWlsZGVyLm91dGRpciwgdGVtcGxhdGVGaWxlKSwgdGVtcGxhdGUsIHsgc3BhY2VzOiAyIH0pO1xuXG4gIGJ1aWxkZXIuYWRkQXJ0aWZhY3QodG9vbGtpdFN0YWNrTmFtZSwge1xuICAgIHR5cGU6IGN4YXBpLkFydGlmYWN0VHlwZS5BV1NfQ0xPVURGT1JNQVRJT05fU1RBQ0ssXG4gICAgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50VXRpbHMuZm9ybWF0KGVudmlyb25tZW50LmFjY291bnQsIGVudmlyb25tZW50LnJlZ2lvbiksXG4gICAgcHJvcGVydGllczoge1xuICAgICAgdGVtcGxhdGVGaWxlXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgYXNzZW1ibHkgPSBidWlsZGVyLmJ1aWxkQXNzZW1ibHkoKTtcbiAgcmV0dXJuIGF3YWl0IGRlcGxveVN0YWNrKHsgc3RhY2s6IGFzc2VtYmx5LmdldFN0YWNrKHRvb2xraXRTdGFja05hbWUpLCBzZGs6IGF3cywgcm9sZUFybiB9KTtcbn1cbiJdfQ==